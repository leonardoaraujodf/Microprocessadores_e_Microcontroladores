#include "msp430.h"                     ; #define controlled include file
#include <msp430g2553.h>
        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack
        
main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
        MOV.W   #0x0A30, R15
        MOV.W   #90,0(R15)               ;
        MOV.W   #80,2(R15)               ;
        MOV.W   #70,4(R15)
        MOV.W   #90,6(R15)
        MOV.W   #10,8(R15)       
        MOV.W   #10,R14                 ; R14 = 10, Recebe o tamanho do vetor na forma 2*n
                                        ; em que n é o número de bytes
        CALL #Vetor_Ordenado_Decres                                               
        JMP $                           ; jump to current location '$'
                                        ; (endless loop)
 Vetor_Ordenado_Decres:
        MOV.W   #0,R13                  ; R13 = i = 0
 For_vetor_ord_decres:
        TST     R13                     ; i > 0?
        JEQ     Fim_Iteracao_for_ord_decres 
        CMP     R14,R13                 ; i < n ?
        JGE     end_for_vetor_ord_decres
        MOV.W   R13,R12                 ; R12 = i
        SUB.W   #2,R12                  ; R12 = i - 1
        PUSH    R13                     ; Guarde i na pilha
        ADD.W   R15,R13
        ADD.W   R15,R12
        CMP     0(R12),0(R13)       ; p[i] >= p[i-1]
        JGE     Nao_decrescente
        POP     R13                     ; Recupere i da pilha
        
 Fim_Iteracao_for_ord_decres:
        ADD     #2,R13                  ; i++
        JMP     For_vetor_ord_decres       
  
 Nao_decrescente:
        POP     R15                     ; Pegue o valor de i da pilha
        CLR     R15                     ; return 0
        CLR     R14
        CLR     R13
        CLR     R12
        RET
  
 end_for_vetor_ord_decres:
        MOV.W   #1,R15                  ; return 1                  
        CLR     R14                     
        CLR     R13                     
        CLR     R12                     
        RET        
        
        END
